;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit decode : 
  module controlunit : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, func3_7 : UInt<3>, en_reg : UInt<1>, rd : UInt<5>, rs2 : UInt<5>, rs1 : UInt<5>, imm : UInt<12>}
    
    io.en_reg <= UInt<1>("h00") @[controlunit.scala 17:11]
    io.func3_7 <= UInt<1>("h00") @[controlunit.scala 18:12]
    node _T = bits(io.instruction, 6, 0) @[controlunit.scala 20:20]
    node _T_1 = eq(_T, UInt<6>("h033")) @[controlunit.scala 20:26]
    when _T_1 : @[controlunit.scala 21:1]
      node io_func3_7_hi = bits(io.instruction, 30, 30) @[controlunit.scala 22:35]
      node io_func3_7_lo = bits(io.instruction, 14, 12) @[controlunit.scala 22:54]
      node _io_func3_7_T = cat(io_func3_7_hi, io_func3_7_lo) @[Cat.scala 30:58]
      io.func3_7 <= _io_func3_7_T @[controlunit.scala 22:14]
      io.en_reg <= UInt<1>("h01") @[controlunit.scala 23:13]
      skip @[controlunit.scala 21:1]
    else : @[controlunit.scala 25:1]
      node _T_2 = bits(io.instruction, 6, 0) @[controlunit.scala 24:26]
      node _T_3 = eq(_T_2, UInt<5>("h013")) @[controlunit.scala 24:32]
      when _T_3 : @[controlunit.scala 25:1]
        node _io_func3_7_T_1 = bits(io.instruction, 14, 12) @[controlunit.scala 26:33]
        io.func3_7 <= _io_func3_7_T_1 @[controlunit.scala 26:16]
        node _T_4 = bits(io.instruction, 14, 12) @[controlunit.scala 27:24]
        node _T_5 = eq(_T_4, UInt<3>("h05")) @[controlunit.scala 27:33]
        when _T_5 : @[controlunit.scala 28:5]
          node io_func3_7_hi_1 = bits(io.instruction, 30, 30) @[controlunit.scala 29:39]
          node io_func3_7_lo_1 = bits(io.instruction, 14, 12) @[controlunit.scala 29:58]
          node _io_func3_7_T_2 = cat(io_func3_7_hi_1, io_func3_7_lo_1) @[Cat.scala 30:58]
          io.func3_7 <= _io_func3_7_T_2 @[controlunit.scala 29:18]
          skip @[controlunit.scala 28:5]
        io.en_reg <= UInt<1>("h01") @[controlunit.scala 31:15]
        skip @[controlunit.scala 25:1]
      else : @[controlunit.scala 33:1]
        node _T_6 = bits(io.instruction, 6, 0) @[controlunit.scala 32:26]
        node _T_7 = eq(_T_6, UInt<2>("h03")) @[controlunit.scala 32:32]
        when _T_7 : @[controlunit.scala 33:1]
          node _io_func3_7_T_3 = bits(io.instruction, 14, 12) @[controlunit.scala 34:33]
          io.func3_7 <= _io_func3_7_T_3 @[controlunit.scala 34:16]
          io.en_reg <= UInt<1>("h01") @[controlunit.scala 35:15]
          skip @[controlunit.scala 33:1]
        else : @[controlunit.scala 37:1]
          node _T_8 = bits(io.instruction, 6, 0) @[controlunit.scala 36:26]
          node _T_9 = eq(_T_8, UInt<6>("h023")) @[controlunit.scala 36:32]
          when _T_9 : @[controlunit.scala 37:1]
            node _io_func3_7_T_4 = bits(io.instruction, 14, 12) @[controlunit.scala 38:33]
            io.func3_7 <= _io_func3_7_T_4 @[controlunit.scala 38:16]
            io.en_reg <= UInt<1>("h00") @[controlunit.scala 39:15]
            skip @[controlunit.scala 37:1]
          else : @[controlunit.scala 40:44]
            node _T_10 = bits(io.instruction, 6, 0) @[controlunit.scala 40:26]
            node _T_11 = eq(_T_10, UInt<7>("h06f")) @[controlunit.scala 40:32]
            when _T_11 : @[controlunit.scala 40:44]
              io.en_reg <= UInt<1>("h01") @[controlunit.scala 41:13]
              skip @[controlunit.scala 40:44]
    node _io_rd_T = bits(io.instruction, 11, 7) @[controlunit.scala 44:25]
    io.rd <= _io_rd_T @[controlunit.scala 44:8]
    node _io_rs1_T = bits(io.instruction, 19, 15) @[controlunit.scala 45:26]
    io.rs1 <= _io_rs1_T @[controlunit.scala 45:9]
    node _io_rs2_T = bits(io.instruction, 24, 20) @[controlunit.scala 46:26]
    io.rs2 <= _io_rs2_T @[controlunit.scala 46:9]
    node _io_imm_T = bits(io.instruction, 31, 20) @[controlunit.scala 47:26]
    io.imm <= _io_imm_T @[controlunit.scala 47:9]
    
  module immgenr : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, imm : UInt<32>}
    
    io.imm <= UInt<1>("h00") @[immgenr.scala 23:10]
    node opcode = bits(io.instruction, 6, 0) @[immgenr.scala 24:30]
    node _T = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_imm_T = bits(io.instruction, 31, 31) @[immgenr.scala 27:44]
      node _io_imm_T_1 = bits(_io_imm_T, 0, 0) @[Bitwise.scala 72:15]
      node io_imm_hi = mux(_io_imm_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_imm_lo = bits(io.instruction, 31, 20) @[immgenr.scala 27:65]
      node _io_imm_T_2 = cat(io_imm_hi, io_imm_lo) @[Cat.scala 30:58]
      io.imm <= _io_imm_T_2 @[immgenr.scala 27:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_imm_T_3 = bits(io.instruction, 31, 31) @[immgenr.scala 30:44]
        node _io_imm_T_4 = bits(_io_imm_T_3, 0, 0) @[Bitwise.scala 72:15]
        node io_imm_hi_1 = mux(_io_imm_T_4, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node io_imm_lo_1 = bits(io.instruction, 31, 20) @[immgenr.scala 30:65]
        node _io_imm_T_5 = cat(io_imm_hi_1, io_imm_lo_1) @[Cat.scala 30:58]
        io.imm <= _io_imm_T_5 @[immgenr.scala 30:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _io_imm_T_6 = bits(io.instruction, 31, 31) @[immgenr.scala 33:44]
          node _io_imm_T_7 = bits(_io_imm_T_6, 0, 0) @[Bitwise.scala 72:15]
          node io_imm_hi_hi = mux(_io_imm_T_7, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node io_imm_hi_lo = bits(io.instruction, 31, 25) @[immgenr.scala 33:65]
          node io_imm_lo_2 = bits(io.instruction, 11, 7) @[immgenr.scala 33:89]
          node io_imm_hi_2 = cat(io_imm_hi_hi, io_imm_hi_lo) @[Cat.scala 30:58]
          node _io_imm_T_8 = cat(io_imm_hi_2, io_imm_lo_2) @[Cat.scala 30:58]
          io.imm <= _io_imm_T_8 @[immgenr.scala 33:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_imm_T_9 = bits(io.instruction, 31, 31) @[immgenr.scala 36:44]
            node _io_imm_T_10 = bits(_io_imm_T_9, 0, 0) @[Bitwise.scala 72:15]
            node io_imm_hi_hi_hi = mux(_io_imm_T_10, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
            node io_imm_hi_hi_lo = bits(io.instruction, 31, 31) @[immgenr.scala 36:65]
            node io_imm_hi_lo_1 = bits(io.instruction, 7, 7) @[immgenr.scala 36:85]
            node io_imm_lo_hi_hi = bits(io.instruction, 30, 25) @[immgenr.scala 36:104]
            node io_imm_lo_hi_lo = bits(io.instruction, 11, 8) @[immgenr.scala 36:127]
            node io_imm_lo_hi = cat(io_imm_lo_hi_hi, io_imm_lo_hi_lo) @[Cat.scala 30:58]
            node io_imm_lo_3 = cat(io_imm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
            node io_imm_hi_hi_1 = cat(io_imm_hi_hi_hi, io_imm_hi_hi_lo) @[Cat.scala 30:58]
            node io_imm_hi_3 = cat(io_imm_hi_hi_1, io_imm_hi_lo_1) @[Cat.scala 30:58]
            node _io_imm_T_11 = cat(io_imm_hi_3, io_imm_lo_3) @[Cat.scala 30:58]
            io.imm <= _io_imm_T_11 @[immgenr.scala 36:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node io_imm_hi_4 = bits(io.instruction, 31, 12) @[immgenr.scala 40:35]
              node io_imm_lo_4 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
              node _io_imm_T_12 = cat(io_imm_hi_4, io_imm_lo_4) @[Cat.scala 30:58]
              io.imm <= _io_imm_T_12 @[immgenr.scala 40:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<32>("h017"), opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node io_imm_hi_5 = bits(io.instruction, 31, 12) @[immgenr.scala 43:35]
                node io_imm_lo_5 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
                node _io_imm_T_13 = cat(io_imm_hi_5, io_imm_lo_5) @[Cat.scala 30:58]
                io.imm <= _io_imm_T_13 @[immgenr.scala 43:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<32>("h06f"), opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  node _io_imm_T_14 = bits(io.instruction, 31, 31) @[immgenr.scala 49:44]
                  node _io_imm_T_15 = bits(_io_imm_T_14, 0, 0) @[Bitwise.scala 72:15]
                  node io_imm_hi_hi_hi_1 = mux(_io_imm_T_15, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                  node io_imm_hi_hi_lo_1 = bits(io.instruction, 31, 31) @[immgenr.scala 49:65]
                  node io_imm_hi_lo_2 = bits(io.instruction, 19, 12) @[immgenr.scala 49:85]
                  node io_imm_lo_hi_hi_1 = bits(io.instruction, 20, 20) @[immgenr.scala 49:109]
                  node io_imm_lo_hi_lo_1 = bits(io.instruction, 30, 21) @[immgenr.scala 49:129]
                  node io_imm_lo_hi_1 = cat(io_imm_lo_hi_hi_1, io_imm_lo_hi_lo_1) @[Cat.scala 30:58]
                  node io_imm_lo_6 = cat(io_imm_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
                  node io_imm_hi_hi_2 = cat(io_imm_hi_hi_hi_1, io_imm_hi_hi_lo_1) @[Cat.scala 30:58]
                  node io_imm_hi_6 = cat(io_imm_hi_hi_2, io_imm_hi_lo_2) @[Cat.scala 30:58]
                  node _io_imm_T_16 = cat(io_imm_hi_6, io_imm_lo_6) @[Cat.scala 30:58]
                  io.imm <= _io_imm_T_16 @[immgenr.scala 49:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<32>("h067"), opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    node _io_imm_T_17 = bits(io.instruction, 31, 31) @[immgenr.scala 53:44]
                    node _io_imm_T_18 = bits(_io_imm_T_17, 0, 0) @[Bitwise.scala 72:15]
                    node io_imm_hi_7 = mux(_io_imm_T_18, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node io_imm_lo_7 = bits(io.instruction, 31, 20) @[immgenr.scala 53:65]
                    node _io_imm_T_19 = cat(io_imm_hi_7, io_imm_lo_7) @[Cat.scala 30:58]
                    io.imm <= _io_imm_T_19 @[immgenr.scala 53:14]
                    skip @[Conditional.scala 39:67]
    
  module registerfile : 
    input clock : Clock
    input reset : Reset
    output io : {flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : UInt<32>, rdata2 : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[registerfile.scala 14:16]
    node _io_rdata1_T = orr(io.raddr1) @[registerfile.scala 15:35]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.raddr1], UInt<1>("h00")) @[registerfile.scala 15:18]
    io.rdata1 <= _io_rdata1_T_1 @[registerfile.scala 15:11]
    node _io_rdata2_T = orr(io.raddr2) @[registerfile.scala 16:35]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.raddr2], UInt<1>("h00")) @[registerfile.scala 16:18]
    io.rdata2 <= _io_rdata2_T_1 @[registerfile.scala 16:11]
    node _T = orr(io.waddr) @[registerfile.scala 17:32]
    node _T_1 = and(io.wen, _T) @[registerfile.scala 17:17]
    when _T_1 : @[registerfile.scala 17:38]
      regs[io.waddr] <= io.wdata @[registerfile.scala 18:25]
      skip @[registerfile.scala 17:38]
    
  module decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip decode_instruction : UInt<32>, decode_func3_7 : UInt<3>, decode_imm_out : UInt<32>, decode_regf_rdata1 : UInt<32>, decode_regf_rdata2 : UInt<32>, flip decode_regf_wdata : UInt<32>}
    
    inst cumod of controlunit @[decode.scala 28:23]
    cumod.clock <= clock
    cumod.reset <= reset
    inst immgmod of immgenr @[decode.scala 29:25]
    immgmod.clock <= clock
    immgmod.reset <= reset
    inst regfmod of registerfile @[decode.scala 30:25]
    regfmod.clock <= clock
    regfmod.reset <= reset
    cumod.io.instruction <= io.decode_instruction @[decode.scala 34:26]
    io.decode_func3_7 <= cumod.io.func3_7 @[decode.scala 38:23]
    immgmod.io.instruction <= io.decode_instruction @[decode.scala 42:27]
    io.decode_imm_out <= immgmod.io.imm @[decode.scala 43:23]
    regfmod.io.raddr1 <= cumod.io.rs1 @[decode.scala 47:23]
    regfmod.io.raddr2 <= cumod.io.rs2 @[decode.scala 48:23]
    regfmod.io.wen <= cumod.io.en_reg @[decode.scala 49:20]
    regfmod.io.waddr <= cumod.io.rd @[decode.scala 50:22]
    io.decode_regf_rdata1 <= regfmod.io.rdata1 @[decode.scala 54:27]
    io.decode_regf_rdata2 <= regfmod.io.rdata2 @[decode.scala 55:27]
    regfmod.io.wdata <= io.decode_regf_wdata @[decode.scala 56:22]
    
